#include parent folder
import os, sys, inspect

currentdir = os.path.dirname(
    os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)

import numpy as np
import pytest
import jax

from src.domain import Domain, Epot



def test_minimize():
    domain = Domain(Epot)
    domain.fill(20, 20, 1, 0.1)
    E_old = Epot(domain.pos)
    domain.minimizeEnergy()
    E_new = Epot(domain.pos)
    assert(E_new < E_old)  

def test_read_write_to_file():
    # TODO fix unit test
    fileName = "out/unitTest_testFile"

    old_domain = Domain(Epot)
    old_domain.fill(5, 9, 1, 0.1)
    old_domain.write_to_file(fileName, comment="generated by test_read_write_to_file(). Unimportant file")

    new_domain = Domain(Epot)
    new_domain.read_from_file(fileName)

    # check if values are equal
    assert old_domain.particle_count == new_domain.particle_count
    assert old_domain.length == new_domain.length
    for a in range (0,new_domain.particle_count):
        for b in range (0,3):
            assert old_domain.pos[a][b] == new_domain.pos[a][b]
            assert old_domain.vel[a][b] == new_domain.vel[a][b]

    assert old_domain.pos.all() == new_domain.pos.all()

    # check file appending
    old_domain.write_to_file(fileName, comment="generated by test_read_write_to_file(). Unimportant file", append=1)
    old_domain.write_to_file(fileName, comment="generated by test_read_write_to_file(). Unimportant file", append=1)
    app_domain = Domain(Epot)
    app_domain.fill(5, 9, 1, 0.2)
    app_domain.write_to_file(fileName, comment="another comment", append=1)
    block_domain = Domain(Epot)
    block_domain.read_from_file(fileName,block=3)

    # check if values are equal
    assert app_domain.particle_count == block_domain.particle_count
    assert app_domain.length == block_domain.length
    for a in range (0,new_domain.particle_count):
        for b in range (0,3):
            assert app_domain.pos[a][b] == block_domain.pos[a][b]
            assert app_domain.vel[a][b] == block_domain.vel[a][b]

    assert app_domain.pos.all() == block_domain.pos.all()




if __name__ == "__main__":
    test_minimize()
    test_read_write_to_file()
